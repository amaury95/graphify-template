// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: library/v1/book.proto

package libraryv1

import (
	utils "github.com/amaury95/protoc-gen-graphify/utils"
	graphql "github.com/graphql-go/graphql"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "graphify.template/domain/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Book struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=_key,proto3" json:"_key,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// Types that are assignable to Type:
	//
	//	*Book_Novel_
	//	*Book_ShortStory_
	//	*Book_Academic_
	//	*Book_Poetry_
	//	*Book_Biography_
	Type       isBook_Type              `protobuf_oneof:"type"`
	MainReview *Book_Review             `protobuf:"bytes,9,opt,name=mainReview,proto3" json:"mainReview,omitempty"`
	Reviews    []*Book_Review           `protobuf:"bytes,10,rep,name=reviews,proto3" json:"reviews,omitempty"`
	Tags       []string                 `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	BookPrice  map[string]int32         `protobuf:"bytes,12,rep,name=bookPrice,proto3" json:"bookPrice,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Chapters   map[int32]string         `protobuf:"bytes,13,rep,name=chapters,proto3" json:"chapters,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Characters map[string]*v1.Character `protobuf:"bytes,14,rep,name=characters,proto3" json:"characters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Portrait   []byte                   `protobuf:"bytes,15,opt,name=portrait,proto3" json:"portrait,omitempty"`
	Gallery    [][]byte                 `protobuf:"bytes,16,rep,name=gallery,proto3" json:"gallery,omitempty"`
	Category   v1.Category              `protobuf:"varint,17,opt,name=category,proto3,enum=common.v1.Category" json:"category,omitempty"`
	// Types that are assignable to Role:
	//
	//	*Book_Admin
	//	*Book_Manager
	//	*Book_Client
	//	*Book_Other
	Role isBook_Role `protobuf_oneof:"role"`
}

func (x *Book) Reset() {
	*x = Book{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book) ProtoMessage() {}

func (x *Book) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book.ProtoReflect.Descriptor instead.
func (*Book) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{0}
}

func (x *Book) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Book) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Book) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (m *Book) GetType() isBook_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Book) GetNovel() *Book_Novel {
	if x, ok := x.GetType().(*Book_Novel_); ok {
		return x.Novel
	}
	return nil
}

func (x *Book) GetShortStory() *Book_ShortStory {
	if x, ok := x.GetType().(*Book_ShortStory_); ok {
		return x.ShortStory
	}
	return nil
}

func (x *Book) GetAcademic() *Book_Academic {
	if x, ok := x.GetType().(*Book_Academic_); ok {
		return x.Academic
	}
	return nil
}

func (x *Book) GetPoetry() *Book_Poetry {
	if x, ok := x.GetType().(*Book_Poetry_); ok {
		return x.Poetry
	}
	return nil
}

func (x *Book) GetBiography() *Book_Biography {
	if x, ok := x.GetType().(*Book_Biography_); ok {
		return x.Biography
	}
	return nil
}

func (x *Book) GetMainReview() *Book_Review {
	if x != nil {
		return x.MainReview
	}
	return nil
}

func (x *Book) GetReviews() []*Book_Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *Book) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Book) GetBookPrice() map[string]int32 {
	if x != nil {
		return x.BookPrice
	}
	return nil
}

func (x *Book) GetChapters() map[int32]string {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *Book) GetCharacters() map[string]*v1.Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *Book) GetPortrait() []byte {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *Book) GetGallery() [][]byte {
	if x != nil {
		return x.Gallery
	}
	return nil
}

func (x *Book) GetCategory() v1.Category {
	if x != nil {
		return x.Category
	}
	return v1.Category(0)
}

func (m *Book) GetRole() isBook_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *Book) GetAdmin() bool {
	if x, ok := x.GetRole().(*Book_Admin); ok {
		return x.Admin
	}
	return false
}

func (x *Book) GetManager() bool {
	if x, ok := x.GetRole().(*Book_Manager); ok {
		return x.Manager
	}
	return false
}

func (x *Book) GetClient() bool {
	if x, ok := x.GetRole().(*Book_Client); ok {
		return x.Client
	}
	return false
}

func (x *Book) GetOther() string {
	if x, ok := x.GetRole().(*Book_Other); ok {
		return x.Other
	}
	return ""
}

type isBook_Type interface {
	isBook_Type()
}

type Book_Novel_ struct {
	Novel *Book_Novel `protobuf:"bytes,4,opt,name=novel,proto3,oneof"`
}

type Book_ShortStory_ struct {
	ShortStory *Book_ShortStory `protobuf:"bytes,5,opt,name=shortStory,proto3,oneof"`
}

type Book_Academic_ struct {
	Academic *Book_Academic `protobuf:"bytes,6,opt,name=academic,proto3,oneof"`
}

type Book_Poetry_ struct {
	Poetry *Book_Poetry `protobuf:"bytes,7,opt,name=poetry,proto3,oneof"`
}

type Book_Biography_ struct {
	Biography *Book_Biography `protobuf:"bytes,8,opt,name=biography,proto3,oneof"`
}

func (*Book_Novel_) isBook_Type() {}

func (*Book_ShortStory_) isBook_Type() {}

func (*Book_Academic_) isBook_Type() {}

func (*Book_Poetry_) isBook_Type() {}

func (*Book_Biography_) isBook_Type() {}

type isBook_Role interface {
	isBook_Role()
}

type Book_Admin struct {
	Admin bool `protobuf:"varint,18,opt,name=admin,proto3,oneof"`
}

type Book_Manager struct {
	Manager bool `protobuf:"varint,19,opt,name=manager,proto3,oneof"`
}

type Book_Client struct {
	Client bool `protobuf:"varint,20,opt,name=client,proto3,oneof"`
}

type Book_Other struct {
	Other string `protobuf:"bytes,21,opt,name=other,proto3,oneof"`
}

func (*Book_Admin) isBook_Role() {}

func (*Book_Manager) isBook_Role() {}

func (*Book_Client) isBook_Role() {}

func (*Book_Other) isBook_Role() {}

type ListBooksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Books []*Book `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
}

func (x *ListBooksResponse) Reset() {
	*x = ListBooksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBooksResponse) ProtoMessage() {}

func (x *ListBooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBooksResponse.ProtoReflect.Descriptor instead.
func (*ListBooksResponse) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{1}
}

func (x *ListBooksResponse) GetBooks() []*Book {
	if x != nil {
		return x.Books
	}
	return nil
}

type DeleteBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteBookRequest) Reset() {
	*x = DeleteBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookRequest) ProtoMessage() {}

func (x *DeleteBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookRequest.ProtoReflect.Descriptor instead.
func (*DeleteBookRequest) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteBookRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Book_Novel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genre           string `protobuf:"bytes,1,opt,name=genre,proto3" json:"genre,omitempty"`
	PublicationYear int32  `protobuf:"varint,2,opt,name=publicationYear,proto3" json:"publicationYear,omitempty"`
}

func (x *Book_Novel) Reset() {
	*x = Book_Novel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Novel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Novel) ProtoMessage() {}

func (x *Book_Novel) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Novel.ProtoReflect.Descriptor instead.
func (*Book_Novel) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Book_Novel) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Book_Novel) GetPublicationYear() int32 {
	if x != nil {
		return x.PublicationYear
	}
	return 0
}

type Book_ShortStory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthPages  int32 `protobuf:"varint,1,opt,name=lengthPages,proto3" json:"lengthPages,omitempty"`
	IsCollection *bool `protobuf:"varint,2,opt,name=isCollection,proto3,oneof" json:"isCollection,omitempty"`
}

func (x *Book_ShortStory) Reset() {
	*x = Book_ShortStory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_ShortStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_ShortStory) ProtoMessage() {}

func (x *Book_ShortStory) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_ShortStory.ProtoReflect.Descriptor instead.
func (*Book_ShortStory) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Book_ShortStory) GetLengthPages() int32 {
	if x != nil {
		return x.LengthPages
	}
	return 0
}

func (x *Book_ShortStory) GetIsCollection() bool {
	if x != nil && x.IsCollection != nil {
		return *x.IsCollection
	}
	return false
}

type Book_Academic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Edition int32  `protobuf:"varint,2,opt,name=edition,proto3" json:"edition,omitempty"`
}

func (x *Book_Academic) Reset() {
	*x = Book_Academic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Academic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Academic) ProtoMessage() {}

func (x *Book_Academic) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Academic.ProtoReflect.Descriptor instead.
func (*Book_Academic) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Book_Academic) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Book_Academic) GetEdition() int32 {
	if x != nil {
		return x.Edition
	}
	return 0
}

type Book_Poetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style       string `protobuf:"bytes,1,opt,name=style,proto3" json:"style,omitempty"`
	IsAnthology *bool  `protobuf:"varint,2,opt,name=isAnthology,proto3,oneof" json:"isAnthology,omitempty"`
}

func (x *Book_Poetry) Reset() {
	*x = Book_Poetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Poetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Poetry) ProtoMessage() {}

func (x *Book_Poetry) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Poetry.ProtoReflect.Descriptor instead.
func (*Book_Poetry) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Book_Poetry) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Book_Poetry) GetIsAnthology() bool {
	if x != nil && x.IsAnthology != nil {
		return *x.IsAnthology
	}
	return false
}

type Book_Biography struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectPerson       string `protobuf:"bytes,1,opt,name=subjectPerson,proto3" json:"subjectPerson,omitempty"`
	NotableAchievements string `protobuf:"bytes,2,opt,name=notableAchievements,proto3" json:"notableAchievements,omitempty"`
}

func (x *Book_Biography) Reset() {
	*x = Book_Biography{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Biography) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Biography) ProtoMessage() {}

func (x *Book_Biography) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Biography.ProtoReflect.Descriptor instead.
func (*Book_Biography) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Book_Biography) GetSubjectPerson() string {
	if x != nil {
		return x.SubjectPerson
	}
	return ""
}

func (x *Book_Biography) GetNotableAchievements() string {
	if x != nil {
		return x.NotableAchievements
	}
	return ""
}

type Book_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Book_Review) Reset() {
	*x = Book_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_book_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Review) ProtoMessage() {}

func (x *Book_Review) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_book_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Review.ProtoReflect.Descriptor instead.
func (*Book_Review) Descriptor() ([]byte, []int) {
	return file_library_v1_book_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Book_Review) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Book_Review) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

var File_library_v1_book_proto protoreflect.FileDescriptor

var file_library_v1_book_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6f, 0x6f,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x0c, 0x0a, 0x04,
	0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x11, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x12, 0x31,
	0x0a, 0x06, 0x70, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x2e, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x38, 0x0a,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0a, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x48, 0x0a, 0x05, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x1a, 0x6b, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x3e, 0x0a, 0x08, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x57, 0x0a, 0x06, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x74, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f,
	0x61, 0x6e, 0x74, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x1a, 0x65, 0x0a, 0x09, 0x42, 0x69, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x14, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x3b, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3c, 0x0a,
	0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x3b, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x25, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x42, 0x93, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x66, 0x79, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x16, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_library_v1_book_proto_rawDescOnce sync.Once
	file_library_v1_book_proto_rawDescData = file_library_v1_book_proto_rawDesc
)

func file_library_v1_book_proto_rawDescGZIP() []byte {
	file_library_v1_book_proto_rawDescOnce.Do(func() {
		file_library_v1_book_proto_rawDescData = protoimpl.X.CompressGZIP(file_library_v1_book_proto_rawDescData)
	})
	return file_library_v1_book_proto_rawDescData
}

var file_library_v1_book_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_library_v1_book_proto_goTypes = []interface{}{
	(*Book)(nil),              // 0: library.v1.Book
	(*ListBooksResponse)(nil), // 1: library.v1.ListBooksResponse
	(*DeleteBookRequest)(nil), // 2: library.v1.DeleteBookRequest
	(*Book_Novel)(nil),        // 3: library.v1.Book.Novel
	(*Book_ShortStory)(nil),   // 4: library.v1.Book.ShortStory
	(*Book_Academic)(nil),     // 5: library.v1.Book.Academic
	(*Book_Poetry)(nil),       // 6: library.v1.Book.Poetry
	(*Book_Biography)(nil),    // 7: library.v1.Book.Biography
	(*Book_Review)(nil),       // 8: library.v1.Book.Review
	nil,                       // 9: library.v1.Book.BookPriceEntry
	nil,                       // 10: library.v1.Book.ChaptersEntry
	nil,                       // 11: library.v1.Book.CharactersEntry
	(v1.Category)(0),          // 12: common.v1.Category
	(*v1.Character)(nil),      // 13: common.v1.Character
}
var file_library_v1_book_proto_depIdxs = []int32{
	3,  // 0: library.v1.Book.novel:type_name -> library.v1.Book.Novel
	4,  // 1: library.v1.Book.short_story:type_name -> library.v1.Book.ShortStory
	5,  // 2: library.v1.Book.academic:type_name -> library.v1.Book.Academic
	6,  // 3: library.v1.Book.poetry:type_name -> library.v1.Book.Poetry
	7,  // 4: library.v1.Book.biography:type_name -> library.v1.Book.Biography
	8,  // 5: library.v1.Book.main_review:type_name -> library.v1.Book.Review
	8,  // 6: library.v1.Book.reviews:type_name -> library.v1.Book.Review
	9,  // 7: library.v1.Book.book_price:type_name -> library.v1.Book.BookPriceEntry
	10, // 8: library.v1.Book.chapters:type_name -> library.v1.Book.ChaptersEntry
	11, // 9: library.v1.Book.characters:type_name -> library.v1.Book.CharactersEntry
	12, // 10: library.v1.Book.category:type_name -> common.v1.Category
	0,  // 11: library.v1.ListBooksResponse.books:type_name -> library.v1.Book
	13, // 12: library.v1.Book.CharactersEntry.value:type_name -> common.v1.Character
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_library_v1_book_proto_init() }
func file_library_v1_book_proto_init() {
	if File_library_v1_book_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_library_v1_book_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_book_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBooksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_book_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_book_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Novel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_book_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_ShortStory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_book_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Academic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_book_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Poetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_book_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Biography); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_book_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_library_v1_book_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Book_Novel_)(nil),
		(*Book_ShortStory_)(nil),
		(*Book_Academic_)(nil),
		(*Book_Poetry_)(nil),
		(*Book_Biography_)(nil),
		(*Book_Admin)(nil),
		(*Book_Manager)(nil),
		(*Book_Client)(nil),
		(*Book_Other)(nil),
	}
	file_library_v1_book_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_library_v1_book_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_library_v1_book_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_library_v1_book_proto_goTypes,
		DependencyIndexes: file_library_v1_book_proto_depIdxs,
		MessageInfos:      file_library_v1_book_proto_msgTypes,
	}.Build()
	File_library_v1_book_proto = out.File
	file_library_v1_book_proto_rawDesc = nil
	file_library_v1_book_proto_goTypes = nil
	file_library_v1_book_proto_depIdxs = nil
}

/*
	Graphql object
*/

/* Argument ... */
func (*Book) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"_key": &graphql.ArgumentConfig{
			Type: graphql.ID,
		},
		"title": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
		"author": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
		"mainReview": &graphql.ArgumentConfig{
			Type: Book_Review_Input,
		},
		"reviews": &graphql.ArgumentConfig{
			Type: graphql.NewList(Book_Review_Input),
		},
		"tags": &graphql.ArgumentConfig{
			Type: graphql.NewList(graphql.String),
		},
		"bookPrice": &graphql.ArgumentConfig{
			Type: utils.JSON,
		},
		"chapters": &graphql.ArgumentConfig{
			Type: utils.JSON,
		},
		"characters": &graphql.ArgumentConfig{
			Type: utils.JSON,
		},
		"portrait": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
		"gallery": &graphql.ArgumentConfig{
			Type: graphql.NewList(graphql.String),
		},
		"category": &graphql.ArgumentConfig{
			Type: v1.Category_Enum,
		},
		"Type": &graphql.ArgumentConfig{
			Type: utils.JSON,
		},
		"Role": &graphql.ArgumentConfig{
			Type: utils.JSON,
		},
	}
}

/* Output ... */
func (*Book) Output() graphql.Output {
	return Book_Object
}

/* Object ... */
func (*Book) Object() *graphql.Object {
	return Book_Object
}

var Book_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book",
	Fields: graphql.Fields{
		"_key": &graphql.Field{
			Type: graphql.ID,
		},
		"title": &graphql.Field{
			Type: graphql.String,
		},
		"author": &graphql.Field{
			Type: graphql.String,
		},
		"mainReview": &graphql.Field{
			Type: Book_Review_Object,
		},
		"reviews": &graphql.Field{
			Type: graphql.NewList(Book_Review_Object),
		},
		"tags": &graphql.Field{
			Type: graphql.NewList(graphql.String),
		},
		"bookPrice": &graphql.Field{
			Type: utils.JSON,
		},
		"chapters": &graphql.Field{
			Type: utils.JSON,
		},
		"characters": &graphql.Field{
			Type: utils.JSON,
		},
		"portrait": &graphql.Field{
			Type: utils.Bytes,
		},
		"gallery": &graphql.Field{
			Type: graphql.NewList(utils.Bytes),
		},
		"category": &graphql.Field{
			Type: v1.Category_Enum,
		},
		"Type": &graphql.Field{
			Type: graphql.NewUnion(graphql.UnionConfig{
				Name: "Book_Type",
				Types: []*graphql.Object{
					option_Book_Novel_,
					option_Book_ShortStory_,
					option_Book_Academic_,
					option_Book_Poetry_,
					option_Book_Biography_,
				},
				ResolveType: func(p graphql.ResolveTypeParams) *graphql.Object {
					switch p.Value.(type) {
					case *Book_Novel_:
						return option_Book_Novel_
					case *Book_ShortStory_:
						return option_Book_ShortStory_
					case *Book_Academic_:
						return option_Book_Academic_
					case *Book_Poetry_:
						return option_Book_Poetry_
					case *Book_Biography_:
						return option_Book_Biography_
					default:
						return nil
					}
				},
			}),
		},
		"Role": &graphql.Field{
			Type: graphql.NewUnion(graphql.UnionConfig{
				Name: "Book_Role",
				Types: []*graphql.Object{
					option_Book_Admin,
					option_Book_Manager,
					option_Book_Client,
					option_Book_Other,
				},
				ResolveType: func(p graphql.ResolveTypeParams) *graphql.Object {
					switch p.Value.(type) {
					case *Book_Admin:
						return option_Book_Admin
					case *Book_Manager:
						return option_Book_Manager
					case *Book_Client:
						return option_Book_Client
					case *Book_Other:
						return option_Book_Other
					default:
						return nil
					}
				},
			}),
		},
	},
	Description: "",
})

var option_Book_Novel_ = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Novel_",
	Fields: graphql.Fields{
		"Novel": &graphql.Field{
			Type: Book_Novel_Object,
		},
	},
})

var option_Book_ShortStory_ = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_ShortStory_",
	Fields: graphql.Fields{
		"ShortStory": &graphql.Field{
			Type: Book_ShortStory_Object,
		},
	},
})

var option_Book_Academic_ = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Academic_",
	Fields: graphql.Fields{
		"Academic": &graphql.Field{
			Type: Book_Academic_Object,
		},
	},
})

var option_Book_Poetry_ = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Poetry_",
	Fields: graphql.Fields{
		"Poetry": &graphql.Field{
			Type: Book_Poetry_Object,
		},
	},
})

var option_Book_Biography_ = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Biography_",
	Fields: graphql.Fields{
		"Biography": &graphql.Field{
			Type: Book_Biography_Object,
		},
	},
})

var option_Book_Admin = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Admin",
	Fields: graphql.Fields{
		"Admin": &graphql.Field{
			Type: graphql.Boolean,
		},
	},
})

var option_Book_Manager = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Manager",
	Fields: graphql.Fields{
		"Manager": &graphql.Field{
			Type: graphql.Boolean,
		},
	},
})

var option_Book_Client = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Client",
	Fields: graphql.Fields{
		"Client": &graphql.Field{
			Type: graphql.Boolean,
		},
	},
})

var option_Book_Other = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Other",
	Fields: graphql.Fields{
		"Other": &graphql.Field{
			Type: graphql.String,
		},
	},
})

var Book_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "Book_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"_key": &graphql.InputObjectFieldConfig{
			Type: graphql.ID,
		},
		"title": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
		"author": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
		"mainReview": &graphql.InputObjectFieldConfig{
			Type: Book_Review_Input,
		},
		"reviews": &graphql.InputObjectFieldConfig{
			Type: graphql.NewList(Book_Review_Input),
		},
		"tags": &graphql.InputObjectFieldConfig{
			Type: graphql.NewList(graphql.String),
		},
		"bookPrice": &graphql.InputObjectFieldConfig{
			Type: utils.JSON,
		},
		"chapters": &graphql.InputObjectFieldConfig{
			Type: utils.JSON,
		},
		"characters": &graphql.InputObjectFieldConfig{
			Type: utils.JSON,
		},
		"portrait": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
		"gallery": &graphql.InputObjectFieldConfig{
			Type: graphql.NewList(graphql.String),
		},
		"category": &graphql.InputObjectFieldConfig{
			Type: v1.Category_Enum,
		},
		"Type": &graphql.InputObjectFieldConfig{
			Type: utils.JSON,
		},
		"Role": &graphql.InputObjectFieldConfig{
			Type: utils.JSON,
		},
	},
})

/* Argument ... */
func (*Book_Novel) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"genre": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
		"publicationYear": &graphql.ArgumentConfig{
			Type: graphql.Int,
		},
	}
}

/* Output ... */
func (*Book_Novel) Output() graphql.Output {
	return Book_Novel_Object
}

/* Object ... */
func (*Book_Novel) Object() *graphql.Object {
	return Book_Novel_Object
}

var Book_Novel_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Novel",
	Fields: graphql.Fields{
		"genre": &graphql.Field{
			Type: graphql.String,
		},
		"publicationYear": &graphql.Field{
			Type: graphql.Int,
		},
	},
	Description: "",
})

var Book_Novel_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "Book_Novel_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"genre": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
		"publicationYear": &graphql.InputObjectFieldConfig{
			Type: graphql.Int,
		},
	},
})

/* Argument ... */
func (*Book_ShortStory) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"lengthPages": &graphql.ArgumentConfig{
			Type: graphql.Int,
		},
		"isCollection": &graphql.ArgumentConfig{
			Type: graphql.Boolean,
		},
	}
}

/* Output ... */
func (*Book_ShortStory) Output() graphql.Output {
	return Book_ShortStory_Object
}

/* Object ... */
func (*Book_ShortStory) Object() *graphql.Object {
	return Book_ShortStory_Object
}

var Book_ShortStory_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_ShortStory",
	Fields: graphql.Fields{
		"lengthPages": &graphql.Field{
			Type: graphql.Int,
		},
		"isCollection": &graphql.Field{
			Type: graphql.Boolean,
		},
	},
	Description: "",
})

var option_Book_ShortStory_IsCollection = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_ShortStory_IsCollection",
	Fields: graphql.Fields{
		"IsCollection": &graphql.Field{
			Type: graphql.Boolean,
		},
	},
})

var Book_ShortStory_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "Book_ShortStory_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"lengthPages": &graphql.InputObjectFieldConfig{
			Type: graphql.Int,
		},
		"isCollection": &graphql.InputObjectFieldConfig{
			Type: graphql.Boolean,
		},
	},
})

/* Argument ... */
func (*Book_Academic) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"subject": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
		"edition": &graphql.ArgumentConfig{
			Type: graphql.Int,
		},
	}
}

/* Output ... */
func (*Book_Academic) Output() graphql.Output {
	return Book_Academic_Object
}

/* Object ... */
func (*Book_Academic) Object() *graphql.Object {
	return Book_Academic_Object
}

var Book_Academic_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Academic",
	Fields: graphql.Fields{
		"subject": &graphql.Field{
			Type: graphql.String,
		},
		"edition": &graphql.Field{
			Type: graphql.Int,
		},
	},
	Description: "",
})

var Book_Academic_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "Book_Academic_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"subject": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
		"edition": &graphql.InputObjectFieldConfig{
			Type: graphql.Int,
		},
	},
})

/* Argument ... */
func (*Book_Poetry) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"style": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
		"isAnthology": &graphql.ArgumentConfig{
			Type: graphql.Boolean,
		},
	}
}

/* Output ... */
func (*Book_Poetry) Output() graphql.Output {
	return Book_Poetry_Object
}

/* Object ... */
func (*Book_Poetry) Object() *graphql.Object {
	return Book_Poetry_Object
}

var Book_Poetry_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Poetry",
	Fields: graphql.Fields{
		"style": &graphql.Field{
			Type: graphql.String,
		},
		"isAnthology": &graphql.Field{
			Type: graphql.Boolean,
		},
	},
	Description: "",
})

var option_Book_Poetry_IsAnthology = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Poetry_IsAnthology",
	Fields: graphql.Fields{
		"IsAnthology": &graphql.Field{
			Type: graphql.Boolean,
		},
	},
})

var Book_Poetry_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "Book_Poetry_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"style": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
		"isAnthology": &graphql.InputObjectFieldConfig{
			Type: graphql.Boolean,
		},
	},
})

/* Argument ... */
func (*Book_Biography) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"subjectPerson": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
		"notableAchievements": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
	}
}

/* Output ... */
func (*Book_Biography) Output() graphql.Output {
	return Book_Biography_Object
}

/* Object ... */
func (*Book_Biography) Object() *graphql.Object {
	return Book_Biography_Object
}

var Book_Biography_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Biography",
	Fields: graphql.Fields{
		"subjectPerson": &graphql.Field{
			Type: graphql.String,
		},
		"notableAchievements": &graphql.Field{
			Type: graphql.String,
		},
	},
	Description: "",
})

var Book_Biography_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "Book_Biography_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"subjectPerson": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
		"notableAchievements": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
	},
})

/* Argument ... */
func (*Book_Review) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"message": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
		"name": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
	}
}

/* Output ... */
func (*Book_Review) Output() graphql.Output {
	return Book_Review_Object
}

/* Object ... */
func (*Book_Review) Object() *graphql.Object {
	return Book_Review_Object
}

var Book_Review_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book_Review",
	Fields: graphql.Fields{
		"message": &graphql.Field{
			Type: graphql.String,
		},
		"name": &graphql.Field{
			Type: graphql.String,
		},
	},
	Description: "",
})

var Book_Review_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "Book_Review_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"message": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
		"name": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
	},
})

/* Argument ... */
func (*ListBooksResponse) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"books": &graphql.ArgumentConfig{
			Type: graphql.NewList(Book_Input),
		},
	}
}

/* Output ... */
func (*ListBooksResponse) Output() graphql.Output {
	return ListBooksResponse_Object
}

/* Object ... */
func (*ListBooksResponse) Object() *graphql.Object {
	return ListBooksResponse_Object
}

var ListBooksResponse_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "ListBooksResponse",
	Fields: graphql.Fields{
		"books": &graphql.Field{
			Type: graphql.NewList(Book_Object),
		},
	},
	Description: "",
})

var ListBooksResponse_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ListBooksResponse_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"books": &graphql.InputObjectFieldConfig{
			Type: graphql.NewList(Book_Input),
		},
	},
})

/* Argument ... */
func (*DeleteBookRequest) Argument() graphql.FieldConfigArgument {
	return graphql.FieldConfigArgument{
		"key": &graphql.ArgumentConfig{
			Type: graphql.String,
		},
	}
}

/* Output ... */
func (*DeleteBookRequest) Output() graphql.Output {
	return DeleteBookRequest_Object
}

/* Object ... */
func (*DeleteBookRequest) Object() *graphql.Object {
	return DeleteBookRequest_Object
}

var DeleteBookRequest_Object = graphql.NewObject(graphql.ObjectConfig{
	Name: "DeleteBookRequest",
	Fields: graphql.Fields{
		"key": &graphql.Field{
			Type: graphql.String,
		},
	},
	Description: "",
})

var DeleteBookRequest_Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "DeleteBookRequest_Input",
	Fields: graphql.InputObjectConfigFieldMap{
		"key": &graphql.InputObjectFieldConfig{
			Type: graphql.String,
		},
	},
})

/*
	Graphify schema module
*/

/* Schema ... */
func (*Book) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "Book",
		"fields": []interface{}{
			map[string]interface{}{
				"name": "_key",
				"type": "string",
			},
			map[string]interface{}{
				"name": "title",
				"type": "string",
			},
			map[string]interface{}{
				"name": "author",
				"type": "string",
			},
			map[string]interface{}{
				"name":     "mainReview",
				"optional": true,
				"type":     "message",
				"schema":   new(Book_Review).Schema(),
			},
			map[string]interface{}{
				"name":   "reviews",
				"kind":   "list",
				"type":   "message",
				"schema": new(Book_Review).Schema(),
			},
			map[string]interface{}{
				"name": "tags",
				"kind": "list",
				"type": "string",
			},
			map[string]interface{}{
				"name": "bookPrice",
				"kind": "map",
				"key": map[string]interface{}{
					"type": "string",
				},
				"value": map[string]interface{}{
					"type": "int32",
				},
			},
			map[string]interface{}{
				"name": "chapters",
				"kind": "map",
				"key": map[string]interface{}{
					"type": "int32",
				},
				"value": map[string]interface{}{
					"type": "string",
				},
			},
			map[string]interface{}{
				"name": "characters",
				"kind": "map",
				"key": map[string]interface{}{
					"type": "string",
				},
				"value": map[string]interface{}{
					"type":   "message",
					"schema": new(v1.Character).Schema(),
				},
			},
			map[string]interface{}{
				"name": "portrait",
				"type": "bytes",
			},
			map[string]interface{}{
				"name": "gallery",
				"kind": "list",
				"type": "bytes",
			},
			map[string]interface{}{
				"name": "category",
				"type": "enum",
				"options": map[string]interface{}{
					"0": "CATEGORY_UNSPECIFIED",
					"1": "CATEGORY_DRAMA",
					"2": "CATEGORY_HORROR",
				},
			},
		},
		"oneofs": map[string]interface{}{
			"Type": map[string]interface{}{
				"Novel": map[string]interface{}{
					"type":   "message",
					"schema": new(Book_Novel).Schema(),
				},
				"ShortStory": map[string]interface{}{
					"type":   "message",
					"schema": new(Book_ShortStory).Schema(),
				},
				"Academic": map[string]interface{}{
					"type":   "message",
					"schema": new(Book_Academic).Schema(),
				},
				"Poetry": map[string]interface{}{
					"type":   "message",
					"schema": new(Book_Poetry).Schema(),
				},
				"Biography": map[string]interface{}{
					"type":   "message",
					"schema": new(Book_Biography).Schema(),
				},
			},
			"Role": map[string]interface{}{
				"Admin": map[string]interface{}{
					"type": "bool",
				},
				"Manager": map[string]interface{}{
					"type": "bool",
				},
				"Client": map[string]interface{}{
					"type": "bool",
				},
				"Other": map[string]interface{}{
					"type": "string",
				},
			},
		},
	}
}

/* Schema ... */
func (*Book_Novel) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "Book_Novel",
		"fields": []interface{}{
			map[string]interface{}{
				"name": "genre",
				"type": "string",
			},
			map[string]interface{}{
				"name": "publicationYear",
				"type": "int32",
			},
		},
		"oneofs": map[string]interface{}{},
	}
}

/* Schema ... */
func (*Book_ShortStory) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "Book_ShortStory",
		"fields": []interface{}{
			map[string]interface{}{
				"name": "lengthPages",
				"type": "int32",
			},
			map[string]interface{}{
				"name":     "isCollection",
				"optional": true,
				"type":     "bool",
			},
		},
		"oneofs": map[string]interface{}{},
	}
}

/* Schema ... */
func (*Book_Academic) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "Book_Academic",
		"fields": []interface{}{
			map[string]interface{}{
				"name": "subject",
				"type": "string",
			},
			map[string]interface{}{
				"name": "edition",
				"type": "int32",
			},
		},
		"oneofs": map[string]interface{}{},
	}
}

/* Schema ... */
func (*Book_Poetry) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "Book_Poetry",
		"fields": []interface{}{
			map[string]interface{}{
				"name": "style",
				"type": "string",
			},
			map[string]interface{}{
				"name":     "isAnthology",
				"optional": true,
				"type":     "bool",
			},
		},
		"oneofs": map[string]interface{}{},
	}
}

/* Schema ... */
func (*Book_Biography) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "Book_Biography",
		"fields": []interface{}{
			map[string]interface{}{
				"name": "subjectPerson",
				"type": "string",
			},
			map[string]interface{}{
				"name": "notableAchievements",
				"type": "string",
			},
		},
		"oneofs": map[string]interface{}{},
	}
}

/* Schema ... */
func (*Book_Review) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "Book_Review",
		"fields": []interface{}{
			map[string]interface{}{
				"name": "message",
				"type": "string",
			},
			map[string]interface{}{
				"name": "name",
				"type": "string",
			},
		},
		"oneofs": map[string]interface{}{},
	}
}

/* Schema ... */
func (*ListBooksResponse) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "ListBooksResponse",
		"fields": []interface{}{
			map[string]interface{}{
				"name":   "books",
				"kind":   "list",
				"type":   "message",
				"schema": new(Book).Schema(),
			},
		},
		"oneofs": map[string]interface{}{},
	}
}

/* Schema ... */
func (*DeleteBookRequest) Schema() map[string]interface{} {
	return map[string]interface{}{
		"name": "DeleteBookRequest",
		"fields": []interface{}{
			map[string]interface{}{
				"name": "key",
				"type": "string",
			},
		},
		"oneofs": map[string]interface{}{},
	}
}

/*
	Graphify unmarshaler
*/

/* UnmarshalJSON ...*/
func (o *Book) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *Book) UnmarshalMap(values map[string]interface{}) {
	if val, ok := values["_key"].(string); ok {
		o.Key = val
	}
	if val, ok := values["title"].(string); ok {
		o.Title = val
	}
	if val, ok := values["author"].(string); ok {
		o.Author = val
	}
	if val, ok := values["mainReview"].(map[string]interface{}); ok {
		field := new(Book_Review)
		field.UnmarshalMap(val)
		o.MainReview = field
	}
	if list, ok := values["reviews"].([]interface{}); ok {
		utils.MakeSlice(&o.Reviews, len(list))
		for index, item := range list {
			if val, ok := item.(map[string]interface{}); ok {
				field := new(Book_Review)
				field.UnmarshalMap(val)
				o.Reviews[index] = field
			}
		}
	}
	if list, ok := values["tags"].([]interface{}); ok {
		utils.MakeSlice(&o.Tags, len(list))
		for index, item := range list {
			if val, ok := item.(string); ok {
				o.Tags[index] = val
			}
		}
	}
	if values, ok := values["bookPrice"].(map[string]interface{}); ok {
		utils.MakeMap(&o.BookPrice)
		for key, value := range values {
			if val, ok := value.(float64); ok {
				o.BookPrice[key] = int32(val)
			}
		}
	}
	if values, ok := values["chapters"].(map[string]interface{}); ok {
		utils.MakeMap(&o.Chapters)
		for key, value := range values {
			var tmp interface{} = utils.ParseFloat(key)
			var parsedKey int32
			if val, ok := tmp.(float64); ok {
				parsedKey = int32(val)
			}
			if val, ok := value.(string); ok {
				o.Chapters[parsedKey] = val
			}
		}
	}
	if values, ok := values["characters"].(map[string]interface{}); ok {
		utils.MakeMap(&o.Characters)
		for key, value := range values {
			if val, ok := value.(map[string]interface{}); ok {
				field := new(v1.Character)
				field.UnmarshalMap(val)
				o.Characters[key] = field
			}
		}
	}
	if val, ok := values["portrait"].(string); ok {
		o.Portrait = utils.DecodeBytes(val)
	}
	if list, ok := values["gallery"].([]interface{}); ok {
		utils.MakeSlice(&o.Gallery, len(list))
		for index, item := range list {
			if val, ok := item.(string); ok {
				o.Gallery[index] = utils.DecodeBytes(val)
			}
		}
	}
	if val, ok := values["category"].(v1.Category); ok {
		o.Category = val
	}
	if val, ok := values["category"].(float64); ok {
		o.Category = v1.Category(val)
	}
	if opt, ok := values["Type"].(map[string]interface{}); ok {
		if val, ok := opt["Novel"].(map[string]interface{}); ok {
			field := new(Book_Novel)
			field.UnmarshalMap(val)
			o.Type = &Book_Novel_{Novel: field}
		}
		if val, ok := opt["ShortStory"].(map[string]interface{}); ok {
			field := new(Book_ShortStory)
			field.UnmarshalMap(val)
			o.Type = &Book_ShortStory_{ShortStory: field}
		}
		if val, ok := opt["Academic"].(map[string]interface{}); ok {
			field := new(Book_Academic)
			field.UnmarshalMap(val)
			o.Type = &Book_Academic_{Academic: field}
		}
		if val, ok := opt["Poetry"].(map[string]interface{}); ok {
			field := new(Book_Poetry)
			field.UnmarshalMap(val)
			o.Type = &Book_Poetry_{Poetry: field}
		}
		if val, ok := opt["Biography"].(map[string]interface{}); ok {
			field := new(Book_Biography)
			field.UnmarshalMap(val)
			o.Type = &Book_Biography_{Biography: field}
		}
	}
	if opt, ok := values["Role"].(map[string]interface{}); ok {
		if val, ok := opt["Admin"].(interface{}); ok {
			var outVal bool
			if val, ok := val.(bool); ok {
				outVal = val
			}
			o.Role = &Book_Admin{Admin: outVal}
		}
		if val, ok := opt["Manager"].(interface{}); ok {
			var outVal bool
			if val, ok := val.(bool); ok {
				outVal = val
			}
			o.Role = &Book_Manager{Manager: outVal}
		}
		if val, ok := opt["Client"].(interface{}); ok {
			var outVal bool
			if val, ok := val.(bool); ok {
				outVal = val
			}
			o.Role = &Book_Client{Client: outVal}
		}
		if val, ok := opt["Other"].(interface{}); ok {
			var outVal string
			if val, ok := val.(string); ok {
				outVal = val
			}
			o.Role = &Book_Other{Other: outVal}
		}
	}
}

/* UnmarshalJSON ...*/
func (o *Book_Novel) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *Book_Novel) UnmarshalMap(values map[string]interface{}) {
	if val, ok := values["genre"].(string); ok {
		o.Genre = val
	}
	if val, ok := values["publicationYear"].(float64); ok {
		o.PublicationYear = int32(val)
	}
}

/* UnmarshalJSON ...*/
func (o *Book_ShortStory) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *Book_ShortStory) UnmarshalMap(values map[string]interface{}) {
	if val, ok := values["lengthPages"].(float64); ok {
		o.LengthPages = int32(val)
	}
	if val, ok := values["isCollection"].(bool); ok {
		o.IsCollection = &val
	}
}

/* UnmarshalJSON ...*/
func (o *Book_Academic) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *Book_Academic) UnmarshalMap(values map[string]interface{}) {
	if val, ok := values["subject"].(string); ok {
		o.Subject = val
	}
	if val, ok := values["edition"].(float64); ok {
		o.Edition = int32(val)
	}
}

/* UnmarshalJSON ...*/
func (o *Book_Poetry) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *Book_Poetry) UnmarshalMap(values map[string]interface{}) {
	if val, ok := values["style"].(string); ok {
		o.Style = val
	}
	if val, ok := values["isAnthology"].(bool); ok {
		o.IsAnthology = &val
	}
}

/* UnmarshalJSON ...*/
func (o *Book_Biography) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *Book_Biography) UnmarshalMap(values map[string]interface{}) {
	if val, ok := values["subjectPerson"].(string); ok {
		o.SubjectPerson = val
	}
	if val, ok := values["notableAchievements"].(string); ok {
		o.NotableAchievements = val
	}
}

/* UnmarshalJSON ...*/
func (o *Book_Review) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *Book_Review) UnmarshalMap(values map[string]interface{}) {
	if val, ok := values["message"].(string); ok {
		o.Message = val
	}
	if val, ok := values["name"].(string); ok {
		o.UserName = val
	}
}

/* UnmarshalJSON ...*/
func (o *ListBooksResponse) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *ListBooksResponse) UnmarshalMap(values map[string]interface{}) {
	if list, ok := values["books"].([]interface{}); ok {
		utils.MakeSlice(&o.Books, len(list))
		for index, item := range list {
			if val, ok := item.(map[string]interface{}); ok {
				field := new(Book)
				field.UnmarshalMap(val)
				o.Books[index] = field
			}
		}
	}
}

/* UnmarshalJSON ...*/
func (o *DeleteBookRequest) UnmarshalJSON(b []byte) error {
	if values, err := utils.MapFromBytes(b); err != nil {
		return err
	} else {
		o.UnmarshalMap(values)
	}
	return nil
}

/* UnmarshalMap populates struct fields from a map, handling decoding for special fields. */
func (o *DeleteBookRequest) UnmarshalMap(values map[string]interface{}) {
	if val, ok := values["key"].(string); ok {
		o.Key = val
	}
}
